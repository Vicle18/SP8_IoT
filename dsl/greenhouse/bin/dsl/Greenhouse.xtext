grammar dsl.Greenhouse with org.eclipse.xtext.common.Terminals

generate greenhouse "http://www.Greenhouse.dsl"


Model:
    "system" name=ID
    hardwareSetup+=HardwareSetup?
    greenhouses+=Greenhouse*
;

HardwareSetup:
	{HardwareSetup} 'hardware' 'types'
	hardware+=Hardware*
	'micro-controllers'
	controllers+=Controller+
	'controller-listeners'
	controllerListeners+= ControllerListener+
;

Hardware:
	SettingActuator | SettingSensor
;


SettingActuator:
	'actuator' name=ID 'has' 'action' settingAction+=SettingAction ('and' settingAction+=SettingAction)*
;

SettingSensor:
	'sensor' name=ID 'publishes' reducer=Reducer? frequency=Frequency
;

Controller:
	'controller' name=ID 'of' 'type' type=ControllerType 'sends' 'heartbeat' heartbeatfreq=HeartbeatFrequency 'times' 'per' 'second'
;

HeartbeatFrequency:
	value=INT
;

ControllerType:
	name=('ESP32' | 'ESP8266')	
;

ControllerListener:
	'listener' name=ID 'will' 'send' 'message' controllerListenerRule+=ControllerListenerRule (',' controllerListenerRule+=ControllerListenerRule)*
;

ControllerListenerRule:
	name=ID 'when' type=[Controller] 'response' op = ('<' | '>' | '=') threshold=Exp
;

Reducer:
	name=('average' | 'median')
;

Frequency:
	freq=Exp 'times' 'per' 'second'
;

Topic:
	'topic' name=ID	
;

SettingAction:
	name=ID 'with' 'values' settingValue+=SettingValue (',' settingValue+=SettingValue)*
;

SettingValue:
	name=ID
;

Greenhouse:
    'greenhouse' name=ID
    row+=Row* elements+=GreenhouseElement*
;

Row:
    'row' name=ID 'includes' 
    elements+=RowElement*
;

GreenhouseElement:
     GreenhouseSensor |  GreenhouseActuator |  GreenhouseRuleSet
;

RowElement:
     RowSensor |  RowActuator | RowRuleSet
;


GreenhouseActuator:
      'global' type=[SettingActuator] name=ID 'on' 'controller' controller=[Controller] ('will' action+=Action)? (',' 'will' action+=Action)* 
;

RowActuator:
     type=[SettingActuator] name=ID 'on' 'controller' controller=[Controller] ('will' action+=Action)? (',' 'will' action+=Action)* 
;

GreenhouseSensor:
     'global' type=[SettingSensor] name=ID 'on' 'controller' controller=[Controller] 'has' variable=Variable 'and' 'states'
        states+=State(',' states+=State)*
;

RowSensor:
    type=[SettingSensor] name=ID 'on' 'controller' controller=[Controller] 'has' variable=Variable 'and' 'states'
        states+=State(',' states+=State)*
;

State:
    name=ID 'when' variable=[Variable] op = ('<' | '>' | '=') threshold=Exp
;

Variable:
    'variable' name=ID
;

Action:
    name=ID value=[SettingValue] 'when' 'receiving' trigger=Trigger
;

Trigger:
    {Trigger} name=ID 
;

RowRuleSet:
	'rule' 'trigger' trigger=[Trigger] 'on' Actuator=[RowActuator] 'when' sensor=[RowSensor] 'is' state=[State]
;

GreenhouseRuleSet:
    'global' 'rule' actuator=[GreenhouseActuator] 'set' action=[Action] settingvalue=[SettingValue] 'when' sensor=[GreenhouseSensor] 'is' state=[State]
;

Exp returns Expression:
	Factor (( {Plus.left=current} '+' | {Minus.left=current}  '-' ) right=Factor)*
;

Factor returns Expression:
	Primary (({Mult.left=current} '*' | {Div.left=current}  '/'  ) right=Primary)*
;

Primary returns Expression:
	{MathNumber} value=INT | '(' Exp ')'
;